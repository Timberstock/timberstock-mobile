require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '13.0'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...), which will be excluded. To fix this,
# you can also exclude `react-native-flipper` in `react-native.config.js`
#
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
#   }
# }
# ```
flipper_config = FlipperConfiguration.disabled
if ENV['NO_FLIPPER'] == '1' then
  # Explicitly disabled through environment variables
  flipper_config = FlipperConfiguration.disabled
elsif podfile_properties.key?('ios.flipper') then
  # Configure Flipper in Podfile.properties.json
  if podfile_properties['ios.flipper'] == 'true' then
    flipper_config = FlipperConfiguration.enabled(["Debug", "Release"])
  elsif podfile_properties['ios.flipper'] != 'false' then
    flipper_config = FlipperConfiguration.enabled(["Debug", "Release"], { 'Flipper' => podfile_properties['ios.flipper'] })
  end
end

target 'TimberStock' do
  use_expo_modules!
  config = use_native_modules!

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    # Note that if you have use_frameworks! enabled, Flipper will not work if enabled
    :flipper_configuration => flipper_config
  )

  # ----- OLD VERSION -------
  # post_install do |installer|
  #   react_native_post_install(
  #     installer,
  #     config[:reactNativePath],
  #     :mac_catalyst_enabled => false
  #   )
  #   __apply_Xcode_12_5_M1_post_install_workaround(installer)

  #   # This is necessary for Xcode 14, because it signs resource bundles by default
  #   # when building for devices.
  #   installer.target_installation_results.pod_target_installation_results
  #     .each do |pod_name, target_installation_result|
  #     target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
  #       resource_bundle_target.build_configurations.each do |config|
  #         config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
  #       end
  #     end
  #   end
  # end

post_install do |installer|
  puts "--- Running post_install ---"
  puts "--- Installer root: #{installer.sandbox.root} ---"
  puts "--- Dir.pwd: #{Dir.pwd} ---"
  public_headers_path = "#{installer.sandbox.root}/Headers/Public"
  puts "--- Public headers path: #{public_headers_path} ---"

  installer.pods_project.targets.each do |target|
    puts "[Target NAME] #{target.name}"
    # Fix for BoringSSL-GRPC
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split
          flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end

    if target.name == "React-NativeModulesApple"
      # Check if ReactCommon folder already exists
      react_common_links_dir_path = "#{public_headers_path}/ReactCommon"
      if Dir.exist?(react_common_links_dir_path)
        puts "--- \"#{react_common_links_dir_path}/\" already exists ---"
      else
        FileUtils.mkdir_p(react_common_links_dir_path)
        puts "--- Created \"#{react_common_links_dir_path}/\" ---"
      end
      # Fix for all files from ReactCommon(1), for example: TurboModule.h, TurboModuleBinding.h, TurboCxxModule.h and LongLivedObject.h
      react_common_node_modules_1 = "#{Dir.pwd}/../node_modules/react-native/ReactCommon/react/nativemodule/core/ReactCommon/"
      FileUtils.ln_s(Dir.glob("#{react_common_node_modules_1}/*.h"), react_common_links_dir_path)
      puts "--- Created links for all files of ReactCommon(1) pointing from \"#{react_common_links_dir_path}/\" to \"#{react_common_node_modules_1}/\" ---"

      # Fix for react/bridging/LongLivedObject.h and react/bridging/CallbackWrapper.h headers (missing to change the import from angled (<>) to quotes ("") in the files themselves (yes, in node_modules))
      # Check if ReactCommon/react/bridging folder already exists
      bridging_links_dir_path = "#{public_headers_path}/ReactCommon/react/bridging"
      if Dir.exist?(bridging_links_dir_path)
        puts "--- \"#{bridging_links_dir_path}/\" already exists ---"
      else
        FileUtils.mkdir_p(bridging_links_dir_path)
        puts "--- Created \"#{bridging_links_dir_path}/\" ---"
      end
      bridging_in_node_modules_path = "#{Dir.pwd}/../node_modules/react-native/ReactCommon/react/bridging"
      FileUtils.ln_s("#{bridging_in_node_modules_path}/LongLivedObject.h",bridging_links_dir_path)
      FileUtils.ln_s("#{bridging_in_node_modules_path}/CallbackWrapper.h",bridging_links_dir_path)
      puts "--- Created links for \"LongLivedObject.h\" and \"CallbackWrapper.h\" pointing from \"#{bridging_links_dir_path}/\" to \"#{bridging_in_node_modules_path}/\" ---"
    end

    if target.name == "ExpoModulesCore"
      # Check if ReactCommon folder already exists
      react_common_links_dir_path = "#{public_headers_path}/ReactCommon"
      if Dir.exist?(react_common_links_dir_path)
        puts "--- \"#{react_common_links_dir_path}/\" already exists ---"
      else
        FileUtils.mkdir_p(react_common_links_dir_path)
        puts "--- Created \"#{react_common_links_dir_path}/\" ---"
      end
      # Fix for ReactCommon(2) files: RCTTurboModule.h and RCTTurboModuleManager.h (its containing folder is other folder with the same name "ReactCommon")
      react_common_node_modules_2 = "#{Dir.pwd}/../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios/ReactCommon"
      FileUtils.ln_s("#{react_common_node_modules_2}/RCTTurboModule.h", react_common_links_dir_path)
      FileUtils.ln_s("#{react_common_node_modules_2}/RCTTurboModuleManager.h", react_common_links_dir_path)
      puts "--- Created links for \"RCTTurboModule.h\" and \"RCTTurboModuleManager.h\" pointing from \"#{react_common_links_dir_path}/\" to \"#{react_common_node_modules_2}/\" ---"
    end

    # Fix for folly headers - using the one from Pods directly
    # if target.name == "expo-dev-menu"
        # target.build_configurations.each do |config|
        # # Add the ios/node_modules path
        # config.build_settings['HEADER_SEARCH_PATHS'] ||= '$(inherited)'
        # config.build_settings['HEADER_SEARCH_PATHS'] << ' "${PODS_ROOT}/../node_modules/react-native"'      
        # end

      # folly_links_dir_path = "#{public_headers_path}/ReactCommon/cxxreact/folly"
      # # Check if ReactCommon/cxxreact/folly folder already exists
      # if Dir.exist?(folly_links_dir_path)
      #   puts "--- \"#{folly_links_dir_path}/\" already exists ---"
      # else
      #   FileUtils.mkdir_p(folly_links_dir_path)
      #   puts "--- Created \"#{folly_links_dir_path}/\" ---"
      # end

      # folly_in_pods_path = "#{installer.sandbox.root}/RCT-Folly/folly"
      # FileUtils.ln_s("#{folly_in_pods_path}/dynamic.h",folly_links_dir_path)
      # puts "--- Created link to \"dynamic.h\" pointing from \"#{folly_links_dir_path}/\" to \"#{folly_in_pods_path}/\" ---"

      # folly_links_dir_path = "#{installer.sandbox.root}/folly"
      # # Check if folly folder already exists
      # if Dir.exist?(folly_links_dir_path)
      #   puts "--- \"#{folly_links_dir_path}/\" already exists ---"
      # else
      #   FileUtils.mkdir_p(folly_links_dir_path)
      #   puts "--- Created \"#{folly_links_dir_path}/\" ---"
      # end
      # FileUtils.ln_s("#{folly_in_pods_path}/dynamic.h",folly_links_dir_path)
      # puts "--- Created link to \"dynamic.h\" pointing from \"#{folly_links_dir_path}/\" to \"#{folly_in_pods_path}/\" ---"
    # end
    
    # Fix for unary_function
    target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']      
      end
    end
  end

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end
